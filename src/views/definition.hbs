<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <link rel="icon" href="data:,">
        <title>{{name}}</title>
        <style>
            body {
                margin: 0;
                font-family: Arial, Helvetica, sans-serif;
                display: flex;
                overflow: hidden;
            }
            canvas { width: 100%; height: 100%; }
            input[type=range] { width: 100%; }
            #parameters {
                width: 20%;
                padding: 20px;
                box-sizing: border-box;
                overflow-y: auto;               
                height: 100vh;
                background-color: black;
                color: white !important;
            }
            #model-container {
                width: 80%;
                position: relative;
            }
            #container { position: relative; width: 100%; height: 100%; }
            #container canvas, #overlay { position: absolute; }
            #overlay { z-index: 1; width: 100%; }
            #overlay div { padding: 5px; }
            #loader {
                border: 5px solid #f3f3f3;
                border-top: 5px solid #3d3d3d;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 1s linear infinite;
                position: absolute;
                top: 50%;
                left: 50%;
                z-index: 2;
            }
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            #view-controls {
                position: absolute;
                bottom: 10px;
                left: 50%;
                transform: translateX(-50%);
                display: flex;
                gap: 10px;
                flex-wrap: wrap;
                justify-content: center;
            }
            #view-controls button {
                padding: 5px 10px;
                background-color: #333;
                color: white;
                border: none;
                cursor: pointer;
            }
            #view-controls button:hover {
                background-color: #555;
            }
        </style>
    </head>
    <body>
        <div id="parameters">
            <h2>Parameters</h2>
            {{#each inputs}}
            <div>
              <label for="{{id}}">{{name}}</label>
              {{#number}}
              <input type="number" id="{{../id}}" value="{{value}}">
              {{/number}}
              {{#range}}
              <input type="range" id="{{../id}}" min="{{min}}" max="{{max}}" value="{{value}}" step="{{step}}">
              {{/range}}
              {{#bool}}
              <input type="checkbox" id="{{../id}}" {{#value}}checked{{/value}}>
              {{/bool}}
            </div>
            {{/each}}
            <div><button id="downloadButton" disabled>Download GLB</button></div>
            <div><a href="{{name}}" download="{{name}}.html">Save source code</a></div>
            <div>
                <h3>Material Properties</h3>
                <label for="metalness">Metalness</label>
                <input type="range" id="metalness" min="0" max="1" step="0.01" value="0.5">
                <label for="roughness">Roughness</label>
                <input type="range" id="roughness" min="0" max="1" step="0.01" value="0.5">
            </div>
        </div>
        <div id="model-container">
            <div id="loader"></div> 
            <div id="view-controls">
                <button id="reset-view">Reset View</button>
                <button id="rotate-left">Rotate Left</button>
                <button id="rotate-right">Rotate Right</button>
                <button id="rotate-up">Rotate Up</button>
                <button id="rotate-down">Rotate Down</button>
            </div>
        </div>

        <script async src="https://unpkg.com/es-module-shims@1.8.0/dist/es-module-shims.js"></script>
        <script type="importmap">
            {
                "imports": {
                    "three": "https://unpkg.com/three@0.158.0/build/three.module.js",
                    "three/examples/jsm/controls/OrbitControls": "https://unpkg.com/three@0.158.0/examples/jsm/controls/OrbitControls.js",
                    "three/examples/jsm/loaders/3DMLoader": "https://unpkg.com/three@0.158.0/examples/jsm/loaders/3DMLoader.js",
                    "three/examples/jsm/exporters/GLTFExporter": "https://unpkg.com/three@0.158.0/examples/jsm/exporters/GLTFExporter.js",
                    "three/examples/jsm/webxr/ARButton": "https://unpkg.com/three@0.158.0/examples/jsm/webxr/ARButton.js",
                    "rhino3dm": "https://unpkg.com/rhino3dm@8.0.0-beta3/rhino3dm.module.js",
                    "rhino_compute": "https://unpkg.com/compute-rhino3d@0.13.0-beta/compute.rhino3d.module.js"
                }
            }
        </script>
        <script type="module">
            import * as THREE from 'three'
            import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'
            import { Rhino3dmLoader } from 'three/examples/jsm/loaders/3DMLoader'
            import { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter'
            import { ARButton } from 'three/examples/jsm/webxr/ARButton'
            import rhino3dm from 'rhino3dm'
            import { RhinoCompute } from 'rhino_compute'

            const loader = new Rhino3dmLoader()
            loader.setLibraryPath('https://unpkg.com/rhino3dm@8.0.0-beta3/')

            const data = {
              definition: '{{name}}',
              inputs: getInputs()
            }

            let doc, scene, camera, renderer, controls
            let mainMaterial, modelGroup

            const rhino = await rhino3dm()
            console.log('Loaded rhino3dm.')

            init()
            compute()

            const downloadButton = document.getElementById("downloadButton")
            downloadButton.onclick = download

            function getInputs() {
              const inputs = {}
              for (const input of document.getElementsByTagName('input')) {
                switch (input.type) {
                  case 'number':
                    inputs[input.id] = input.valueAsNumber
                    input.onchange = onSliderChange
                    break
                  case 'range':
                    inputs[input.id] = input.valueAsNumber
                    input.onmouseup = onSliderChange
                    input.ontouchend = onSliderChange
                    break
                  case 'checkbox':
                    inputs[input.id] = input.checked
                    input.onclick = onSliderChange
                    break
                }
              }
              console.log(inputs);
              return inputs
            }

            function init() {
                THREE.Object3D.DefaultUp = new THREE.Vector3(0, 0, 1)
                scene = new THREE.Scene()
                scene.background = new THREE.Color('black')

                const aspectRatio = window.innerWidth * 0.8 / window.innerHeight
                camera = new THREE.PerspectiveCamera(45, aspectRatio, 1, 1000)
                camera.position.set(20, -20, 20)

                renderer = new THREE.WebGLRenderer({ antialias: true })
                renderer.setPixelRatio(window.devicePixelRatio)
                renderer.setSize(window.innerWidth * 0.8, window.innerHeight)
                renderer.xr.enabled = true
                document.getElementById('model-container').appendChild(renderer.domElement)

                controls = new OrbitControls(camera, renderer.domElement)
                controls.enableDamping = true
                controls.dampingFactor = 0.05
                controls.screenSpacePanning = true
                controls.minDistance = 1
                controls.maxDistance = 100
                controls.maxPolarAngle = Math.PI

                const hemiLight = new THREE.HemisphereLight(0xffffff, 0x8d8d8d, 10)
                hemiLight.position.set(0, 20, 0)
                scene.add(hemiLight)

                const directionalLight = new THREE.DirectionalLight(0xffffff)
                directionalLight.intensity = 2
                directionalLight.castShadow = true
                scene.add(directionalLight)

                document.body.appendChild(ARButton.createButton(renderer))

                mainMaterial = new THREE.MeshStandardMaterial({
                    color: 0xcccccc,
                    metalness: 0.5,
                    roughness: 5,
                    vertexColors: true
                })

                modelGroup = new THREE.Group()
                scene.add(modelGroup)

                document.getElementById('metalness').addEventListener('input', updateMaterialProperty)
                document.getElementById('roughness').addEventListener('input', updateMaterialProperty)

                document.getElementById('reset-view').addEventListener('click', resetView)
                document.getElementById('rotate-left').addEventListener('click', () => rotateModel(-Math.PI / 4, 0))
                document.getElementById('rotate-right').addEventListener('click', () => rotateModel(Math.PI / 4, 0))
                document.getElementById('rotate-up').addEventListener('click', () => rotateModel(0, -Math.PI / 4))
                document.getElementById('rotate-down').addEventListener('click', () => rotateModel(0, Math.PI / 4))

                window.addEventListener('resize', onWindowResize, false)
                animate()
            }

            function resetView() {
                modelGroup.rotation.set(0, 0, 0)
                camera.position.set(20, -20, 20)
                controls.target.set(0, 0, 0)
                controls.update()
            }

            function rotateModel(angleY, angleX) {
                modelGroup.rotation.y += angleY
                modelGroup.rotation.x += angleX
            }

            function updateMaterialProperty(event) {
                mainMaterial[event.target.id] = event.target.valueAsNumber
                modelGroup.traverse((child) => {
                    if (child.isMesh) {
                        child.material[event.target.id] = event.target.valueAsNumber
                    }
                })
            }

            async function compute() {
              const url = new URL('/solve/' + data.definition, window.location.origin)
              Object.keys(data.inputs).forEach(key => url.searchParams.append(key, data.inputs[key]))
              console.log(url.toString())
              try {
                const response = await fetch(url)
                if(!response.ok) {
                  throw new Error(response.statusText)
                }
                const responseJson = await response.json()
                console.log(responseJson)
                collectResults(responseJson)
              } catch(error) {
                console.error(error)
              }
            }

            function collectResults(responseJson) {
                const values = responseJson.values
                if (doc !== undefined)
                    doc.delete()
                doc = new rhino.File3dm()
                for (let i = 0; i < values.length; i++) {
                    for (const path in values[i].InnerTree) {
                        const branch = values[i].InnerTree[path]
                        for (let j = 0; j < branch.length; j++) {
                            const rhinoObject = decodeItem(branch[j])
                            if (rhinoObject !== null) {
                                doc.objects().add(rhinoObject, null)
                            }
                        }
                    }
                }
                if (doc.objects().count < 1) {
                    console.error('No rhino objects to load!')
                    showSpinner(false)
                    return
                }
                const buffer = new Uint8Array(doc.toByteArray()).buffer
                loader.parse(buffer, function (object) {
                    modelGroup.clear()
                    modelGroup.add(object)
                    object.traverse((child) => {
                        if (child.isMesh) {
                            child.castShadow = true
                            child.receiveShadow = true
                            if (child.geometry.attributes.color) {
                                child.material = mainMaterial.clone()
                            }
                        }
                    })
                    showSpinner(false)
                    downloadButton.disabled = false
                    zoomCameraToSelection(camera, controls, modelGroup.children)
                })
            }

            function decodeItem(item) {
                const data = JSON.parse(item.data)
                if (item.type === 'System.String') {
                    try {
                        const obj = rhino.DracoCompression.decompressBase64String(data)
                        if (obj === null) {
                            const arr = _base64ToArrayBuffer(data)
                            return rhino.File3dm.fromByteArray(arr)
                        } else {
                            return obj
                        }
                    } catch {}
                } else if (typeof data === 'object') {
                    return rhino.CommonObject.decode(data)
                }
                return null
            }

            function onSliderChange() {
                showSpinner(true)
                let inputs = {}
                for (const input of document.getElementsByTagName('input')) {
                    switch (input.type) {
                        case 'number':
                        case 'range':
                            inputs[input.id] = input.valueAsNumber
                            break
                        case 'checkbox':
                            inputs[input.id] = input.checked
                            break
                    }
                }
                data.inputs = inputs
                compute()
            }

            function animate() {
                requestAnimationFrame(animate)
                controls.update()
                renderer.render(scene, camera)
            }

            function onWindowResize() {
                camera.aspect = (window.innerWidth * 0.8) / window.innerHeight
                camera.updateProjectionMatrix()
                renderer.setSize(window.innerWidth * 0.8, window.innerHeight)
            }

            function zoomCameraToSelection(camera, controls, selection, fitOffset = 1.2) {
                const box = new THREE.Box3()
                for (const object of selection) {
                    if (object.isLight) continue
                    box.expandByObject(object)
                }
                const size = box.getSize(new THREE.Vector3())
                const center = box.getCenter(new THREE.Vector3())
                const maxSize = Math.max(size.x, size.y, size.z)
                const fitHeightDistance = maxSize / (2 * Math.atan(Math.PI * camera.fov / 360))
                const fitWidthDistance = fitHeightDistance / camera.aspect
                const distance = fitOffset * Math.max(fitHeightDistance, fitWidthDistance)
                 const direction = controls.target.clone()
                    .sub(camera.position)
                    .normalize()
                    .multiplyScalar(distance)
                controls.maxDistance = distance * 10
                controls.target.copy(center)
                camera.near = distance / 100
                camera.far = distance * 100
                camera.updateProjectionMatrix()
                camera.position.copy(controls.target).sub(direction)
                controls.update()
            }

            function download() {
                const exporter = new GLTFExporter()
                exporter.parse(scene, function (result) {
                    if (result instanceof ArrayBuffer) {
                        saveArrayBuffer(result, 'scene.glb')
                    } else {
                        const output = JSON.stringify(result, null, 2)
                        saveString(output, 'scene.gltf')
                    }
                }, { binary: true })
            }

            function saveArrayBuffer(buffer, filename) {
                save(new Blob([buffer], { type: 'application/octet-stream' }), filename)
            }

            function saveString(text, filename) {
                save(new Blob([text], { type: 'text/plain' }), filename)
            }

            function save(blob, filename) {
                const link = document.createElement('a')
                link.style.display = 'none'
                document.body.appendChild(link)
                link.href = URL.createObjectURL(blob)
                link.download = filename
                link.click()
                document.body.removeChild(link)
            }

            function showSpinner(enable) {
                if (enable)
                    document.getElementById('loader').style.display = 'block'
                else
                    document.getElementById('loader').style.display = 'none'
            }

            function _base64ToArrayBuffer(base64) {
                var binary_string = window.atob(base64)
                var len = binary_string.length
                var bytes = new Uint8Array(len)
                for (var i = 0; i < len; i++) {
                    bytes[i] = binary_string.charCodeAt(i)
                }
                return bytes.buffer
            }
        </script>
    </body>
</html>
